 this.status = '  ';
  this.customFullscreen = false;
  this.showAlert = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app
    // Modal dialogs should fully cover application
    // to prevent interaction outside of dialog
    $mdDialog.show(
      $mdDialog.alert()
        .parent(angular.element(document.querySelector('#popupContainer')))
        .clickOutsideToClose(true)
        .title('This is an alert title')
        .textContent('You can specify some description text in here.')
        .ariaLabel('Alert Dialog Demo')
        .ok('Got it!')
        .targetEvent(ev)
    );
  };
  this.showConfirm = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app
    var confirm = $mdDialog.confirm()
          .title('Would you like to delete your debt?')
          .textContent('All of the banks have agreed to forgive you your debts.')
          .ariaLabel('Lucky day')
          .targetEvent(ev)
          .ok('Please do it!')
          .cancel('Sounds like a scam');
    $mdDialog.show(confirm).then(function() {
      this.status = 'You decided to get rid of your debt.';
    }, function() {
      this.status = 'You decided to keep your debt.';
    });
  };
  this.showPrompt = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app
    var confirm = $mdDialog.prompt()
      .title('What would you name your dog?')
      .textContent('Bowser is a common name.')
      .placeholder('Dog name')
      .ariaLabel('Dog name')
      .initialValue('Buddy')
      .targetEvent(ev)
      .ok('Okay!')
      .cancel('I\'m a cat person');
    $mdDialog.show(confirm).then(function(result) {
      this.status = 'You decided to name your dog ' + result + '.';
    }, function() {
      this.status = 'You didn\'t name your dog.';
    });
  };
  this.showAdvanced = function(ev) {
    $mdDialog.show({
      controller: DialogController,
      templateUrl: 'dialog1.tmpl.html',
      parent: angular.element(document.body),
      targetEvent: ev,
      clickOutsideToClose:true,
      fullscreen: this.customFullscreen // Only for -xs, -sm breakpoints.
    })
    .then(function(answer) {
      this.status = 'You said the information was "' + answer + '".';
    }, function() {
      this.status = 'You cancelled the dialog.';
    });
  };
  this.showTabDialog = function(ev) {
    $mdDialog.show({
      controller: DialogController,
      templateUrl: 'tabDialog.tmpl.html',
      parent: angular.element(document.body),
      targetEvent: ev,
      clickOutsideToClose:true
    })
        .then(function(answer) {
          this.status = 'You said the information was "' + answer + '".';
        }, function() {
          this.status = 'You cancelled the dialog.';
        });
  };
  this.showPrerenderedDialog = function(ev) {
    $mdDialog.show({
      controller: DialogController,
      contentElement: '#myDialog',
      parent: angular.element(document.body),
      targetEvent: ev,
      clickOutsideToClose: true
    });
  };
  function DialogController(this, $mdDialog) {
    this.hide = function() {
      $mdDialog.hide();
    };
    this.cancel = function() {
      $mdDialog.cancel();
    };
    this.answer = function(answer) {
      $mdDialog.hide(answer);
    };
  }